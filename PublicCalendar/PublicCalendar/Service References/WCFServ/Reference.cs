//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace PublicCalendar.WCFServ {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Calendar", Namespace="http://schemas.datacontract.org/2004/07/PublicCalendar.Web")]
    public partial class Calendar : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CountryCodeField;
        
        private System.Nullable<System.DateTime> DateField;
        
        private string DescField;
        
        private string PHField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc {
            get {
                return this.DescField;
            }
            set {
                if ((object.ReferenceEquals(this.DescField, value) != true)) {
                    this.DescField = value;
                    this.RaisePropertyChanged("Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PH {
            get {
                return this.PHField;
            }
            set {
                if ((object.ReferenceEquals(this.PHField, value) != true)) {
                    this.PHField = value;
                    this.RaisePropertyChanged("PH");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DailyOTRate_CN", Namespace="http://schemas.datacontract.org/2004/07/PublicCalendar.Web")]
    public partial class DailyOTRate_CN : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime WorkDateField;
        
        private string WeekDayField;
        
        private decimal WorkHoursField;
        
        private string OTRateField;
        
        private System.Nullable<char> HolidayFlagField;
        
        private char DateStatusField;
        
        private string RemarksField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WorkDate {
            get {
                return this.WorkDateField;
            }
            set {
                if ((this.WorkDateField.Equals(value) != true)) {
                    this.WorkDateField = value;
                    this.RaisePropertyChanged("WorkDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string WeekDay {
            get {
                return this.WeekDayField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekDayField, value) != true)) {
                    this.WeekDayField = value;
                    this.RaisePropertyChanged("WeekDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public decimal WorkHours {
            get {
                return this.WorkHoursField;
            }
            set {
                if ((this.WorkHoursField.Equals(value) != true)) {
                    this.WorkHoursField = value;
                    this.RaisePropertyChanged("WorkHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string OTRate {
            get {
                return this.OTRateField;
            }
            set {
                if ((object.ReferenceEquals(this.OTRateField, value) != true)) {
                    this.OTRateField = value;
                    this.RaisePropertyChanged("OTRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Nullable<char> HolidayFlag {
            get {
                return this.HolidayFlagField;
            }
            set {
                if ((this.HolidayFlagField.Equals(value) != true)) {
                    this.HolidayFlagField = value;
                    this.RaisePropertyChanged("HolidayFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public char DateStatus {
            get {
                return this.DateStatusField;
            }
            set {
                if ((this.DateStatusField.Equals(value) != true)) {
                    this.DateStatusField = value;
                    this.RaisePropertyChanged("DateStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Remarks {
            get {
                return this.RemarksField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarksField, value) != true)) {
                    this.RemarksField = value;
                    this.RaisePropertyChanged("Remarks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DailyOTRate_HK", Namespace="http://schemas.datacontract.org/2004/07/PublicCalendar.Web")]
    public partial class DailyOTRate_HK : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime WorkDateField;
        
        private string WeekDayField;
        
        private decimal WorkHoursField;
        
        private string OTRateField;
        
        private System.Nullable<char> HolidayFlagField;
        
        private char DateStatusField;
        
        private string RemarksField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WorkDate {
            get {
                return this.WorkDateField;
            }
            set {
                if ((this.WorkDateField.Equals(value) != true)) {
                    this.WorkDateField = value;
                    this.RaisePropertyChanged("WorkDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string WeekDay {
            get {
                return this.WeekDayField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekDayField, value) != true)) {
                    this.WeekDayField = value;
                    this.RaisePropertyChanged("WeekDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public decimal WorkHours {
            get {
                return this.WorkHoursField;
            }
            set {
                if ((this.WorkHoursField.Equals(value) != true)) {
                    this.WorkHoursField = value;
                    this.RaisePropertyChanged("WorkHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string OTRate {
            get {
                return this.OTRateField;
            }
            set {
                if ((object.ReferenceEquals(this.OTRateField, value) != true)) {
                    this.OTRateField = value;
                    this.RaisePropertyChanged("OTRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Nullable<char> HolidayFlag {
            get {
                return this.HolidayFlagField;
            }
            set {
                if ((this.HolidayFlagField.Equals(value) != true)) {
                    this.HolidayFlagField = value;
                    this.RaisePropertyChanged("HolidayFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public char DateStatus {
            get {
                return this.DateStatusField;
            }
            set {
                if ((this.DateStatusField.Equals(value) != true)) {
                    this.DateStatusField = value;
                    this.RaisePropertyChanged("DateStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Remarks {
            get {
                return this.RemarksField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarksField, value) != true)) {
                    this.RemarksField = value;
                    this.RaisePropertyChanged("Remarks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DailyOTRate_MA", Namespace="http://schemas.datacontract.org/2004/07/PublicCalendar.Web")]
    public partial class DailyOTRate_MA : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime WorkDateField;
        
        private string WeekDayField;
        
        private decimal WorkHoursField;
        
        private string OTRateField;
        
        private System.Nullable<char> HolidayFlagField;
        
        private char DateStatusField;
        
        private string RemarksField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime WorkDate {
            get {
                return this.WorkDateField;
            }
            set {
                if ((this.WorkDateField.Equals(value) != true)) {
                    this.WorkDateField = value;
                    this.RaisePropertyChanged("WorkDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string WeekDay {
            get {
                return this.WeekDayField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekDayField, value) != true)) {
                    this.WeekDayField = value;
                    this.RaisePropertyChanged("WeekDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public decimal WorkHours {
            get {
                return this.WorkHoursField;
            }
            set {
                if ((this.WorkHoursField.Equals(value) != true)) {
                    this.WorkHoursField = value;
                    this.RaisePropertyChanged("WorkHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string OTRate {
            get {
                return this.OTRateField;
            }
            set {
                if ((object.ReferenceEquals(this.OTRateField, value) != true)) {
                    this.OTRateField = value;
                    this.RaisePropertyChanged("OTRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Nullable<char> HolidayFlag {
            get {
                return this.HolidayFlagField;
            }
            set {
                if ((this.HolidayFlagField.Equals(value) != true)) {
                    this.HolidayFlagField = value;
                    this.RaisePropertyChanged("HolidayFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public char DateStatus {
            get {
                return this.DateStatusField;
            }
            set {
                if ((this.DateStatusField.Equals(value) != true)) {
                    this.DateStatusField = value;
                    this.RaisePropertyChanged("DateStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Remarks {
            get {
                return this.RemarksField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarksField, value) != true)) {
                    this.RemarksField = value;
                    this.RaisePropertyChanged("Remarks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="WCFServ.UtilitiesCalendar")]
    public interface UtilitiesCalendar {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UtilitiesCalendar/DoWork", ReplyAction="urn:UtilitiesCalendar/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        string EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UtilitiesCalendar/GetCalendar", ReplyAction="urn:UtilitiesCalendar/GetCalendarResponse")]
        System.IAsyncResult BeginGetCalendar(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar> EndGetCalendar(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UtilitiesCalendar/UpdatePublicDate", ReplyAction="urn:UtilitiesCalendar/UpdatePublicDateResponse")]
        System.IAsyncResult BeginUpdatePublicDate(PublicCalendar.WCFServ.Calendar cal, System.AsyncCallback callback, object asyncState);
        
        void EndUpdatePublicDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UtilitiesCalendar/GetDailyCN", ReplyAction="urn:UtilitiesCalendar/GetDailyCNResponse")]
        System.IAsyncResult BeginGetDailyCN(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN> EndGetDailyCN(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UtilitiesCalendar/GetDailyHK", ReplyAction="urn:UtilitiesCalendar/GetDailyHKResponse")]
        System.IAsyncResult BeginGetDailyHK(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK> EndGetDailyHK(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UtilitiesCalendar/GetDailyMA", ReplyAction="urn:UtilitiesCalendar/GetDailyMAResponse")]
        System.IAsyncResult BeginGetDailyMA(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA> EndGetDailyMA(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UtilitiesCalendar/UpdateTable", ReplyAction="urn:UtilitiesCalendar/UpdateTableResponse")]
        System.IAsyncResult BeginUpdateTable(string code, PublicCalendar.WCFServ.DailyOTRate_CN dcn, PublicCalendar.WCFServ.DailyOTRate_HK dhk, PublicCalendar.WCFServ.DailyOTRate_MA dma, string amend, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTable(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface UtilitiesCalendarChannel : PublicCalendar.WCFServ.UtilitiesCalendar, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DoWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDailyCNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDailyCNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDailyHKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDailyHKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDailyMACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDailyMACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UtilitiesCalendarClient : System.ServiceModel.ClientBase<PublicCalendar.WCFServ.UtilitiesCalendar>, PublicCalendar.WCFServ.UtilitiesCalendar {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCalendarDelegate;
        
        private EndOperationDelegate onEndGetCalendarDelegate;
        
        private System.Threading.SendOrPostCallback onGetCalendarCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePublicDateDelegate;
        
        private EndOperationDelegate onEndUpdatePublicDateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePublicDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDailyCNDelegate;
        
        private EndOperationDelegate onEndGetDailyCNDelegate;
        
        private System.Threading.SendOrPostCallback onGetDailyCNCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDailyHKDelegate;
        
        private EndOperationDelegate onEndGetDailyHKDelegate;
        
        private System.Threading.SendOrPostCallback onGetDailyHKCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDailyMADelegate;
        
        private EndOperationDelegate onEndGetDailyMADelegate;
        
        private System.Threading.SendOrPostCallback onGetDailyMACompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTableDelegate;
        
        private EndOperationDelegate onEndUpdateTableDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UtilitiesCalendarClient() {
        }
        
        public UtilitiesCalendarClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UtilitiesCalendarClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UtilitiesCalendarClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UtilitiesCalendarClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<DoWorkCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetCalendarCompletedEventArgs> GetCalendarCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdatePublicDateCompleted;
        
        public event System.EventHandler<GetDailyCNCompletedEventArgs> GetDailyCNCompleted;
        
        public event System.EventHandler<GetDailyHKCompletedEventArgs> GetDailyHKCompleted;
        
        public event System.EventHandler<GetDailyMACompletedEventArgs> GetDailyMACompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTableCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PublicCalendar.WCFServ.UtilitiesCalendar.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string PublicCalendar.WCFServ.UtilitiesCalendar.EndDoWork(System.IAsyncResult result) {
            return base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            string retVal = ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).EndDoWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new DoWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PublicCalendar.WCFServ.UtilitiesCalendar.BeginGetCalendar(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCalendar(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar> PublicCalendar.WCFServ.UtilitiesCalendar.EndGetCalendar(System.IAsyncResult result) {
            return base.Channel.EndGetCalendar(result);
        }
        
        private System.IAsyncResult OnBeginGetCalendar(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).BeginGetCalendar(callback, asyncState);
        }
        
        private object[] OnEndGetCalendar(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar> retVal = ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).EndGetCalendar(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCalendarCompleted(object state) {
            if ((this.GetCalendarCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCalendarCompleted(this, new GetCalendarCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCalendarAsync() {
            this.GetCalendarAsync(null);
        }
        
        public void GetCalendarAsync(object userState) {
            if ((this.onBeginGetCalendarDelegate == null)) {
                this.onBeginGetCalendarDelegate = new BeginOperationDelegate(this.OnBeginGetCalendar);
            }
            if ((this.onEndGetCalendarDelegate == null)) {
                this.onEndGetCalendarDelegate = new EndOperationDelegate(this.OnEndGetCalendar);
            }
            if ((this.onGetCalendarCompletedDelegate == null)) {
                this.onGetCalendarCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCalendarCompleted);
            }
            base.InvokeAsync(this.onBeginGetCalendarDelegate, null, this.onEndGetCalendarDelegate, this.onGetCalendarCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PublicCalendar.WCFServ.UtilitiesCalendar.BeginUpdatePublicDate(PublicCalendar.WCFServ.Calendar cal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePublicDate(cal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PublicCalendar.WCFServ.UtilitiesCalendar.EndUpdatePublicDate(System.IAsyncResult result) {
            base.Channel.EndUpdatePublicDate(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePublicDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PublicCalendar.WCFServ.Calendar cal = ((PublicCalendar.WCFServ.Calendar)(inValues[0]));
            return ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).BeginUpdatePublicDate(cal, callback, asyncState);
        }
        
        private object[] OnEndUpdatePublicDate(System.IAsyncResult result) {
            ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).EndUpdatePublicDate(result);
            return null;
        }
        
        private void OnUpdatePublicDateCompleted(object state) {
            if ((this.UpdatePublicDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePublicDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePublicDateAsync(PublicCalendar.WCFServ.Calendar cal) {
            this.UpdatePublicDateAsync(cal, null);
        }
        
        public void UpdatePublicDateAsync(PublicCalendar.WCFServ.Calendar cal, object userState) {
            if ((this.onBeginUpdatePublicDateDelegate == null)) {
                this.onBeginUpdatePublicDateDelegate = new BeginOperationDelegate(this.OnBeginUpdatePublicDate);
            }
            if ((this.onEndUpdatePublicDateDelegate == null)) {
                this.onEndUpdatePublicDateDelegate = new EndOperationDelegate(this.OnEndUpdatePublicDate);
            }
            if ((this.onUpdatePublicDateCompletedDelegate == null)) {
                this.onUpdatePublicDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePublicDateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePublicDateDelegate, new object[] {
                        cal}, this.onEndUpdatePublicDateDelegate, this.onUpdatePublicDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PublicCalendar.WCFServ.UtilitiesCalendar.BeginGetDailyCN(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDailyCN(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN> PublicCalendar.WCFServ.UtilitiesCalendar.EndGetDailyCN(System.IAsyncResult result) {
            return base.Channel.EndGetDailyCN(result);
        }
        
        private System.IAsyncResult OnBeginGetDailyCN(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).BeginGetDailyCN(callback, asyncState);
        }
        
        private object[] OnEndGetDailyCN(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN> retVal = ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).EndGetDailyCN(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDailyCNCompleted(object state) {
            if ((this.GetDailyCNCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDailyCNCompleted(this, new GetDailyCNCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDailyCNAsync() {
            this.GetDailyCNAsync(null);
        }
        
        public void GetDailyCNAsync(object userState) {
            if ((this.onBeginGetDailyCNDelegate == null)) {
                this.onBeginGetDailyCNDelegate = new BeginOperationDelegate(this.OnBeginGetDailyCN);
            }
            if ((this.onEndGetDailyCNDelegate == null)) {
                this.onEndGetDailyCNDelegate = new EndOperationDelegate(this.OnEndGetDailyCN);
            }
            if ((this.onGetDailyCNCompletedDelegate == null)) {
                this.onGetDailyCNCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDailyCNCompleted);
            }
            base.InvokeAsync(this.onBeginGetDailyCNDelegate, null, this.onEndGetDailyCNDelegate, this.onGetDailyCNCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PublicCalendar.WCFServ.UtilitiesCalendar.BeginGetDailyHK(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDailyHK(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK> PublicCalendar.WCFServ.UtilitiesCalendar.EndGetDailyHK(System.IAsyncResult result) {
            return base.Channel.EndGetDailyHK(result);
        }
        
        private System.IAsyncResult OnBeginGetDailyHK(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).BeginGetDailyHK(callback, asyncState);
        }
        
        private object[] OnEndGetDailyHK(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK> retVal = ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).EndGetDailyHK(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDailyHKCompleted(object state) {
            if ((this.GetDailyHKCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDailyHKCompleted(this, new GetDailyHKCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDailyHKAsync() {
            this.GetDailyHKAsync(null);
        }
        
        public void GetDailyHKAsync(object userState) {
            if ((this.onBeginGetDailyHKDelegate == null)) {
                this.onBeginGetDailyHKDelegate = new BeginOperationDelegate(this.OnBeginGetDailyHK);
            }
            if ((this.onEndGetDailyHKDelegate == null)) {
                this.onEndGetDailyHKDelegate = new EndOperationDelegate(this.OnEndGetDailyHK);
            }
            if ((this.onGetDailyHKCompletedDelegate == null)) {
                this.onGetDailyHKCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDailyHKCompleted);
            }
            base.InvokeAsync(this.onBeginGetDailyHKDelegate, null, this.onEndGetDailyHKDelegate, this.onGetDailyHKCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PublicCalendar.WCFServ.UtilitiesCalendar.BeginGetDailyMA(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDailyMA(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA> PublicCalendar.WCFServ.UtilitiesCalendar.EndGetDailyMA(System.IAsyncResult result) {
            return base.Channel.EndGetDailyMA(result);
        }
        
        private System.IAsyncResult OnBeginGetDailyMA(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).BeginGetDailyMA(callback, asyncState);
        }
        
        private object[] OnEndGetDailyMA(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA> retVal = ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).EndGetDailyMA(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDailyMACompleted(object state) {
            if ((this.GetDailyMACompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDailyMACompleted(this, new GetDailyMACompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDailyMAAsync() {
            this.GetDailyMAAsync(null);
        }
        
        public void GetDailyMAAsync(object userState) {
            if ((this.onBeginGetDailyMADelegate == null)) {
                this.onBeginGetDailyMADelegate = new BeginOperationDelegate(this.OnBeginGetDailyMA);
            }
            if ((this.onEndGetDailyMADelegate == null)) {
                this.onEndGetDailyMADelegate = new EndOperationDelegate(this.OnEndGetDailyMA);
            }
            if ((this.onGetDailyMACompletedDelegate == null)) {
                this.onGetDailyMACompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDailyMACompleted);
            }
            base.InvokeAsync(this.onBeginGetDailyMADelegate, null, this.onEndGetDailyMADelegate, this.onGetDailyMACompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PublicCalendar.WCFServ.UtilitiesCalendar.BeginUpdateTable(string code, PublicCalendar.WCFServ.DailyOTRate_CN dcn, PublicCalendar.WCFServ.DailyOTRate_HK dhk, PublicCalendar.WCFServ.DailyOTRate_MA dma, string amend, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTable(code, dcn, dhk, dma, amend, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PublicCalendar.WCFServ.UtilitiesCalendar.EndUpdateTable(System.IAsyncResult result) {
            base.Channel.EndUpdateTable(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string code = ((string)(inValues[0]));
            PublicCalendar.WCFServ.DailyOTRate_CN dcn = ((PublicCalendar.WCFServ.DailyOTRate_CN)(inValues[1]));
            PublicCalendar.WCFServ.DailyOTRate_HK dhk = ((PublicCalendar.WCFServ.DailyOTRate_HK)(inValues[2]));
            PublicCalendar.WCFServ.DailyOTRate_MA dma = ((PublicCalendar.WCFServ.DailyOTRate_MA)(inValues[3]));
            string amend = ((string)(inValues[4]));
            return ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).BeginUpdateTable(code, dcn, dhk, dma, amend, callback, asyncState);
        }
        
        private object[] OnEndUpdateTable(System.IAsyncResult result) {
            ((PublicCalendar.WCFServ.UtilitiesCalendar)(this)).EndUpdateTable(result);
            return null;
        }
        
        private void OnUpdateTableCompleted(object state) {
            if ((this.UpdateTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTableAsync(string code, PublicCalendar.WCFServ.DailyOTRate_CN dcn, PublicCalendar.WCFServ.DailyOTRate_HK dhk, PublicCalendar.WCFServ.DailyOTRate_MA dma, string amend) {
            this.UpdateTableAsync(code, dcn, dhk, dma, amend, null);
        }
        
        public void UpdateTableAsync(string code, PublicCalendar.WCFServ.DailyOTRate_CN dcn, PublicCalendar.WCFServ.DailyOTRate_HK dhk, PublicCalendar.WCFServ.DailyOTRate_MA dma, string amend, object userState) {
            if ((this.onBeginUpdateTableDelegate == null)) {
                this.onBeginUpdateTableDelegate = new BeginOperationDelegate(this.OnBeginUpdateTable);
            }
            if ((this.onEndUpdateTableDelegate == null)) {
                this.onEndUpdateTableDelegate = new EndOperationDelegate(this.OnEndUpdateTable);
            }
            if ((this.onUpdateTableCompletedDelegate == null)) {
                this.onUpdateTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTableCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTableDelegate, new object[] {
                        code,
                        dcn,
                        dhk,
                        dma,
                        amend}, this.onEndUpdateTableDelegate, this.onUpdateTableCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PublicCalendar.WCFServ.UtilitiesCalendar CreateChannel() {
            return new UtilitiesCalendarClientChannel(this);
        }
        
        private class UtilitiesCalendarClientChannel : ChannelBase<PublicCalendar.WCFServ.UtilitiesCalendar>, PublicCalendar.WCFServ.UtilitiesCalendar {
            
            public UtilitiesCalendarClientChannel(System.ServiceModel.ClientBase<PublicCalendar.WCFServ.UtilitiesCalendar> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DoWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCalendar(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCalendar", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar> EndGetCalendar(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar> _result = ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.Calendar>)(base.EndInvoke("GetCalendar", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdatePublicDate(PublicCalendar.WCFServ.Calendar cal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cal;
                System.IAsyncResult _result = base.BeginInvoke("UpdatePublicDate", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdatePublicDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdatePublicDate", _args, result);
            }
            
            public System.IAsyncResult BeginGetDailyCN(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDailyCN", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN> EndGetDailyCN(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN> _result = ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_CN>)(base.EndInvoke("GetDailyCN", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDailyHK(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDailyHK", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK> EndGetDailyHK(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK> _result = ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_HK>)(base.EndInvoke("GetDailyHK", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDailyMA(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDailyMA", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA> EndGetDailyMA(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA> _result = ((System.Collections.ObjectModel.ObservableCollection<PublicCalendar.WCFServ.DailyOTRate_MA>)(base.EndInvoke("GetDailyMA", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTable(string code, PublicCalendar.WCFServ.DailyOTRate_CN dcn, PublicCalendar.WCFServ.DailyOTRate_HK dhk, PublicCalendar.WCFServ.DailyOTRate_MA dma, string amend, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = code;
                _args[1] = dcn;
                _args[2] = dhk;
                _args[3] = dma;
                _args[4] = amend;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTable", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateTable(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateTable", _args, result);
            }
        }
    }
}
